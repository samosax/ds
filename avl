#include<iostream>
using namespace std;
struct node
{
   int data;
   struct node *lchild;
   struct node *rchild;
}*r;
class avl_tree
{
   public:
      int height(node *); //to find the height of the node
      int difference(node *);//to check whether the nodes are balanced
      node *rr_rotation(node *);
      node *ll_rotation(node *);
      node *lr_rotation(node*);
      node *rl_rotation(node *);
      node *balance(node *);//to perform the operation for balancing the node
      node *insert_ele(node*, int);
      void show(node*, int);
      void inorder(node *);
      void preorder(node *);
      void postorder(node*);
      avl_tree()
       {
         r = NULL;
       }
};
int avl_tree::height(node *t)
{
   int h = 0;
   if (t != NULL)
   {
      int l_height = height(t->lchild);
      int r_height = height(t->rchild);
      int max_height = max(l_height, r_height);
      h = max_height + 1;
   }
   return h;
}
int avl_tree::difference(node *t)
{
   int l_height = height(t->lchild);
   int r_height = height(t->rchild);
   int b_factor = l_height - r_height;
   return b_factor;
}
node *avl_tree::rr_rotation(node *parent)
{
   node *t;
   t = parent->rchild;
   parent->rchild = t->lchild;
   t->lchild = parent;
   cout<<"Right-Right Rotation";
   return t;
}
node *avl_tree::ll_rotation(node *parent)
{
   node *t;
   t = parent->lchild;
   parent->lchild = t->rchild;
   t->rchild = parent;
   cout<<"Left-Left Rotation";
   return t;
}
node *avl_tree::lr_rotation(node *parent)
{
   node*t;
   t = parent->lchild;
   parent->lchild = rr_rotation(t);
   cout<<"Left-Right Rotation";
   return ll_rotation(parent);
}
node *avl_tree::rl_rotation(node *parent)
{
   node *t;
   t = parent->rchild;
   parent->rchild = ll_rotation(t);
   cout<<"Right-Left Rotation";
   return rr_rotation(parent);
}
node *avl_tree::balance(node *t)
{
   int bal_factor = difference(t);
   if (bal_factor > 1)
    {
      if (difference(t->lchild) > 0)
         t = ll_rotation(t);
      else
         t = lr_rotation(t);
    }
   else if (bal_factor < -1)
    {
      if (difference(t->rchild) > 0)
         t = rl_rotation(t);
      else
         t = rr_rotation(t);
    }
   return t;
}
node *avl_tree::insert_ele(node *r, int v)
{
   if (r == NULL)
    {
      r = new node;
      r->data= v;
      r->lchild = NULL;
      r->rchild = NULL;
      return r;
    }
   else if (v< r->data)
    {
      r->lchild = insert_ele(r->lchild, v);
      r = balance(r);
    }
   else if (v >= r->data)
    {
      r->rchild = insert_ele(r->rchild, v);
      r = balance(r);
     }
   return r;
}
void avl_tree::show(node *p, int l)
{
   int i;
   if (p != NULL)
    {
      show(p->rchild, l+ 1);
      cout<<" ";
      if (p == r)
         cout << "Root -> ";
      for (i = 0; i < l&& p != r; i++)
         cout << " ";
         cout << p->data;
         show(p->lchild, l + 1);
    }
}
void avl_tree::inorder(node *t)
{
   if (t!= NULL)
   {
      inorder(t->lchild);
      cout << t->data << " ";
      inorder(t->rchild);
      return;
   }
}
void avl_tree::preorder(node *t)
{
   if (t!= NULL)
   {
      cout << t->data << " ";
      preorder(t->lchild);
      preorder(t->rchild);
      return;
   }
}
void avl_tree::postorder(node *t)
{
   if (t!= NULL)
   {
      postorder(t ->lchild);
      postorder(t ->rchild);
      cout << t->data << " ";
      return;
   }
}
int main()
{
   int choice, i;
   avl_tree avl;
   while (1<=choice<=6)
    {
      cout<<"1.Insert Element into the tree" << endl;
      cout<<"2.show Balanced AVL Tree" << endl;
      cout<<"3.InOrder traversal" << endl;
      cout<<"4.PreOrder traversal" << endl;
      cout<<"5.PostOrder traversal" << endl;
      cout<<"6.Exit" << endl;
      cout<<"Enter your Choice: ";
      cin>>choice;

     if(choice==1)
      {
        cout << "Enter value to be inserted: ";
        cin >> i;
        r = avl.insert_ele(r, i);
      }
      else if(choice==2)
        {
         if (r == NULL)
         {
            cout << "Tree is Empty" << endl;
            continue;
         }
         else
         {
          cout << "Balanced AVL Tree: \n" << endl;
          avl.show(r, 1);
         }
        }
        else if(choice==3)
        {
         cout << "Inorder Traversal: \n" << endl;
         avl.inorder(r);
        }
         else if(choice==4)
         {
            cout << "Preorder Traversal:\n" << endl;
            avl.preorder(r);
         }
         else if (choice==5)
         {
            cout << "Postorder Traversal: \n" << endl;
            avl.postorder(r);
         }
         else if(choice==6)
         {
             cout<<"\n You have exited : \n";
             choice=7;
         }
   }
   return 0;
}
